/* eslint-disable @typescript-eslint/no-explicit-any */
import MarkdownIt from 'markdown-it';
import Token from 'markdown-it/lib/token';

export { MarkdownIt, Token };

export interface MarkdownOptions {
  /**
   * Enable HTML tags is source
   * @default true
   */
  html?: boolean;

  /**
   * Specifies HTML tags which be forbidden in render.
   * @default ['base', 'head', 'link', 'meta', 'title', 'style',  'script']
   */
  htmlBlacklist?: string[];

  /**
   * Convert `\n` in paragraphs into <br>
   * @default true
   */
  lineBreaks?: boolean;
}

export interface MarkdownData {
  /**
   * Meta data generated by plugins
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  meta: { [key in string]?: any };

  /**
   * Tokens from markdown-it parse
   */
  tokens: Token[];

  /**
   * HTML rendering result
   */
  html: string;
}

export type MarkdownPluginInstallFunction<T = any> = (it: MarkdownIt, options?: T) => void;

export interface MarkdownPlugin<TOptions = any, TMeta = any> {
  /**
   * Identify, **can't** duplicated
   */
  readonly id: string;

  /**
   * Install function to modify behaviors of internal markdown-it
   */
  readonly install?: MarkdownPluginInstallFunction<TOptions>;

  /**
   * Meta data generating function.
   */
  readonly meta?: (tokens: Token[], config?: TOptions) => TMeta;
}
